策略模式与工厂模式从uml图上来说，基本一致。只是强调的封装不同。我们以工厂模式和策略模式的比较来讲解策略模式。
工厂模式我们可以做如下理解：假设有Audi的公司生产汽车，它掌握一项核心的技术就是生产汽车，另一方面，它生产的汽车是有不同型号的，并且在不同的生产线上进行组装。当客户通过销售部门进行预定后，Audi公司将在指定的生产线上为客户生产出它所需要的汽车。
策略(Strategy)模式在结构上与工厂模式类似，唯一的区别是工厂模式实例化一个产品的操作是在服务端来做的，换句话说客户端传达给服务端的只是某种标识，服务端根据该标识实例化一个对象。而策略模式的客户端传达给服务端的是一个实例，服务端只是将该实例拿过去在服务端的环境里执行该实例的方法。这就好比一个对汽车不甚了解的人去买车，他在那一比划，说要什么什么样的，销售部门根据他的这个“比划”来形成一份订单，这就是工厂模式下的工作方式。而策略模式下那个顾客就是个行家，他自己给出了订单的详细信息，销售部门只是转了一下手就交给生产部门去做了。通过两相对比，我们不难发现，采用工厂模式必须提供足够灵活的销售部门，如果用户有了新的需求，销售部门必须马上意识到这样才可以做出合适的订单。所以倘一款新车出来了，生产部门和销售部门都需要更新，对顾客来说也需要更新对新车的描述所以需要改动的地方有三处。而策略模式中的销售部门工作比较固定，它只负责接受订单并执行特定的几个操作。当一款新车出来时，只需要对服务端的生产部门和客户端的代码进行更新，而不需要更新销售部门的代码。 
技术支持： 简单工厂和策略的基础都是因为面向对象的封装与多态。他们实现的思想都是先设定一个抽象的模型并从该模型派生出符合不同客户需求的各种方法，并加以封装。
工厂模式和策略模式的区别在于实例化一个对象的位置不同，对工厂模式而言，实例化对象是放在服务端的，即放在了工厂类里面；
而策略模式实例化对象的操作在客户端，服务端的“销售部门”只负责传递该对象，并在服务端的环境里执行特定的操作。。。
工厂模式要求服务端的销售部门足够灵敏，而策略模式由于对策略进行了封装，所以他的销售部门比较傻，需要客户提供足够能区分使用哪种策略的参数，而这最好的就是该策略的实例了。
Java代码  收藏代码
//抽象产品  
abstract class AudiCar{  
    private String name;  
      
    public abstract void makeCar();  
      
    public String getName() {  
        return name;  
    }  
    public void setName(String name) {  
        this.name = name;  
    }  
}  
//具体产品  
class AudiA6 extends AudiCar{  
    public void makeCar(){  
        System.out.println(this.getName()+"----go-----------------------");  
    }  
}  
class AudiA4 extends AudiCar{  
    public void makeCar(){  
        System.out.println(this.getName()+"----go-----------------------");  
    }  
}  
  
//销售部门----服务端  
class CarContext {  
    AudiCar audiCar = null;  
  
    public CarContext(AudiCar audiCar) {  
        this.audiCar = audiCar;  
    }  
      
    public void orderCar(){  
        this.audiCar.makeCar();  
    }  
}  
  
//客户----客户端（这个客户是内行，什么都懂，他说我要A6，销售部门立刻给他a6，所以销售部门不用很懂）  
public class SimplyFactoryAndStrategy2 {  
  
    public static void main(String[] args) throws IOException {  
          
        //客户说我要什么什么样子的车子，销售人员才知道他要什么样子的车子  
        AudiCar car = new AudiA6();  
        car.setName("a6");  
          
        CarContext context = new CarContext(car);  
        context.orderCar();  
    }  
}  
  
  
//工厂模式---与上面的策略模式比较  
//抽象产品  
abstract class AudiCar{  
    private String name;  
      
    public abstract void makeCar();  
      
    public String getName() {  
        return name;  
    }  
    public void setName(String name) {  
        this.name = name;  
    }  
}  
//具体产品  
class AudiA6 extends AudiCar{  
    public void makeCar(){  
        System.out.println(this.getName()+"----go-----------------------");  
    }  
}  
class AudiA4 extends AudiCar{  
    public void makeCar(){  
        System.out.println(this.getName()+"----go-----------------------");  
    }  
}  
  
//简单工厂---销售部门----服务端  
class CarFactroy{  
    public static AudiCar createCar(String car){  
        AudiCar c = null;  
        if("A6".equalsIgnoreCase(car))  
            c = new AudiA6();  
        else if("A4".equalsIgnoreCase(car))  
            c = new AudiA4();  
        return c;  
    }  
}  
  
//客户----客户端（这个客户是外行，什么都不懂，只要随便描述下车，销售部门才能知道他要那款车，所以销售部门比较牛）  
public class SimplyFactoryAndStrategy {  
  
    public static void main(String[] args) throws IOException {  
          
        System.out.print("请输入您要坐的车：（A6、A4）");  
        String carName = new BufferedReader(new InputStreamReader(System.in)).readLine();  
          
        //客户说我要什么什么样子的车子，销售人员才知道他要什么样子的车子  
        AudiCar car = CarFactroy.createCar(carName);  
        car.setName(carName);  
        car.makeCar();    
    }  
}  
 
 

策略模式的优缺点

  策略模式的主要优点有：

策略类之间可以自由切换，由于策略类实现自同一个抽象，所以他们之间可以自由切换。
易于扩展，增加一个新的策略对策略模式来说非常容易，基本上可以在不改变原有代码的基础上进行扩展。
避免使用多重条件，如果不使用策略模式，对于所有的算法，必须使用条件语句进行连接，通过条件判断来决定使用哪一种算法，在上一篇文章中我们已经提到，使用多重条件判断是非常不容易维护的。
  策略模式的缺点主要有两个：

维护各个策略类会给开发带来额外开销，可能大家在这方面都有经验：一般来说，策略类的数量超过5个，就比较令人头疼了。
必须对 客户端（调用者）暴露所有的策略类，因为使用哪种策略是由客户端来决定的，因此，客户端应该知道有什么策略，并且了解各种策略之间的区别，否则，后果很严 重。例如，有一个排序算法的策略模式，提供了快速排序、冒泡排序、选择排序这三种算法，客户端在使用这些算法之前，是不是先要明白这三种算法的适用情况？ 再比如，客户端要使用一个容器，有链表实现的，也有数组实现的，客户端是不是也要明白链表和数组有什么区别？就这一点来说是有悖于迪米特法则的。
适用场景

        做面向对象设计的，对策略模式一定很熟悉，因为它实质上就是面向对象中的继承和多态，在看完策略模式的通用代码后，我想，即使之前从来没有听说过策略模式，在开发过程中也一定使用过它吧？至少在在以下两种情况下，大家可以考虑使用策略模式，

几个类的主要逻辑相同，只在部分逻辑的算法和行为上稍有区别的情况。
有几种相似的行为，或者说算法，客户端需要动态地决定使用哪一种，那么可以使用策略模式，将这些算法封装起来供客户端调用。
       策略模式是一种简单常用的模式，我们在进行开发的时候，会经常有意无意地使用它，一般来说，策略模式不会单独使用，跟模版方法模式、工厂模式等混合使用的情况比较多。